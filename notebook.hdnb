```js
var persons = [
    {
        id: 0,
        name: 'Juanita'
    },

    {
        id: 1,
        name: 'Pedrito'
    },

    {
        id: 2,
        name: 'Bertica'
    },

    {
        id: 3,
        name: 'Pilar'
    },
]


function search(collection = [{ id: 0 }], id) {
    var pos = -1;

    for (let i = 0; i < collection.length; i++) {
        if (collection[i].id == id) {
            pos = i;
            break;
        }
    }

    return pos;
}

function remove(collection = [], id) {
    const pos = search(persons, id);

    // not found
    if (pos == -1) {
        return
    }
    collection.splice(pos, 1);
}




var originalPersons = [];
persons.forEach((p)=>originalPersons.push(p))
remove(persons, 2)

console.log({ originalPersons, persons })
```

```js
const {
    DateTime,
    Settings
} = require('luxon');
Settings.defaultZone = 'utc'

const sSample = {
    "year": 2022,
    "month": 5,
    "day": 1,
    "hour": 5,
    "minute": 0,
    "second": 0,
    "millisecond": 0
}

const eSample = {
    "year": 2022,
    "month": 5,
    "day": 31,
    "hour": 10,
    "minute": 0,
    "second": 0,
    "millisecond": 0
}


// have to get in dates at midnigth (day start) to make the math safe
function calculateNightsInBetweenDateObj(start, end) {
    // set to midnight
    const midNightStart = setToMidNigth(start);
    const midNightEnd = setToMidNigth(end);
    // init dates
    const start_date = DateTime.fromObject(midNightStart);
    const end_date = DateTime.fromObject(midNightEnd);
    // get time diff
    const ms_of_diff = end_date.diff(start_date).toObject().milliseconds;

    // const days_of_diff = DateTime.fromMillis(ms_of_diff).day;
    // get nights
    const msInADay = 24 * 60 * 60 * 1000;
    const nights = ms_of_diff / msInADay;
    // const nightsCount = days_of_diff - 1;


    console.log({
        midNightStart,
        midNightEnd,
        start_date: start_date.c,
        end_date: end_date,
        ms_of_diff,

        // nights,
        // nightsCount,
        // days_of_diff,
        // ms_of_diff,
        // start_date: start_date.c,
        // end_date: end_date.c
    })
}


function setToMidNigth(date) {
    return {
        "year": date.year,
        "month": date.month,
        "day": date.day,
        "hour": 0,
        "minute": 0,
        "second": 0,
        "millisecond": 0
    }
}

calculateNightsInBetweenDateObj(sSample, eSample)
```

```js
// timeString Formaters


function useTimeStrFormat(time_str = "xx:xx:xx") {
    if (typeof time_str != "string") {
        return "";
    }
    const time = time_str.split(":").slice(0, 2).join(':');
    return time;
}

const timeStr = '13:00:00';

const r = useTimeStrFormat(timeStr);
console.log(r)
```

```js
const date = new Date(Date.UTC(2020, 11, 20, 3, 23, 16, 738));
// Results below assume UTC timezone - your results may vary

// Specify default date formatting for language (locale)
console.log(new Intl.DateTimeFormat('en-US').format(date));

const tz = Intl.DateTimeFormat().resolvedOptions();

console.log(tz)


```

```js
/** Is In collection */

function isInCollection(
    collection = [{ searchKey: "" }],
    searchKey,
    element
) {

    var isIn = false;
    for (let i = 0; i < collection.length; i++) {
        // console.log(collection[i][searchKey]);
        if (collection[i][searchKey] === element) {
            isIn = true;
            break;
        }
    }
    return isIn;
}


const collection = [
    {
        id: 0
    },
    {
        id: 1
    },
    {
        id: 2
    },
]
const r = isInCollection(collection, 'id', '1');
console.log(r)
```

```js
// {...a}


const a = {
    p1: 'p1',
    p2: 'p1'
}

const b = {
    ...a,
    p3:'p3'
}

console.log(b)
```

```js
// isInCollectionDeep

function isInCollectionDeep(
    collection = [{ searchKey: "" }],
    searchKey = 'lv1.lv2',
    element
) {

    var isIn = false;

    // const 
    // 
    for (let i = 0; i < collection.length; i++) {
        // console.log(collection[i][searchKey]);
        if (collection[i][searchKey] === element) {
            isIn = true;
            break;
        }
    }
    return isIn;
}

```

```js
const { DateTime, Settings } = require("luxon");
Settings.defaultZone = "utc";



function toTimeZoneKeepenLocal(date, timeZone) {
  var _date = date instanceof Date ? date : new Date(date);
  if (Number.isNaN(_date.valueOf())) {
    throw new Error("Non valid date param: ", date);
  }
  const mappedDate = DateTime.fromJSDate(_date).setZone(timeZone, {
    keepLocalTime: true,
  });
  return mappedDate;
}

function printNow(params) {
  const now = new Date();
  const nowInUtc = toTimeZoneKeepenLocal(now, "utc");
  console.clear()
  console.log(nowInUtc.toISO());

  setTimeout(printNow, 1e3);
}

printNow()


```

```js
const a = new Date();

function trimTimeZone(date = new Date()) {
    const _date = date.toISOString();


    return _date;
}

console.log(trimTimeZone(a))
```
